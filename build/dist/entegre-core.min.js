// EntegreJS -- http://entegre.io
"use strict";
class Entegre {
constructor() {
this.idc = 1;
this.factory = {};
this.widget = {};
this.tag = {};
this.control = {};
this.plugin = {};
this.utility = {};
this.events = {};
}
startevents() {
if(this.utility.events) {
this.events = new this.utility.events();
}
return this;
}
id(p) {
var s = (p && p.length > 0 ? p:'ejs') + this.idc;
this.idc ++;
return s;
}
type(o,t) {
var x = Object.prototype.toString.call(o);
x = x.substring(8,(x.length - 1)).toLowerCase();
if(t) {
return (t == x);
}
return x;
}
iterable(x) {
var y = this.type(x);
return (y == 'object' || y == 'array');
}
empty(x) {
if(x == null) {
return true;
}
if(x.length > 0) {
return false;
}
if(x.length === 0) {
return true;
}
for(var k in x) {
if(Object.prototype.hasOwnProperty.call(x,k)) {
return false;
}
}
return true;
}
random(min,max) {
min = new Number(min);
max = new Number(max);
return Math.floor(Math.random() * (max - min + 1)) + min;
}
chunk(x,s) {
if(x && this.type(x,'array')) {
s = parseInt(s);
if(x.length > s) {
var y =[];
while(x.length > 0) {
var z =[];
for(var i = 1; i <= s; i ++) {
if(x.length > 0) {
z.push(x.shift());
}
}
y.push(z);
}
return y;
}
}
return x;
}
node(t,a,c) {
return new E.factory.node(t,a,c);
}
}
var E = new Entegre();
E.utility.events = class {
constructor() {
this.e = {};
}
register(n) {
if(n && !E.empty(n) && !(n in this.e)) {
this.e[ n] =[];
}
return this;
}
listen(n,f) {
if(n && !E.empty(n) && f && E.type(f,'function')) {
this.register(n);
this.e[ n].push(f);
}
return this;
}
trigger(n,a) {
this.register(n);
this.e[ n].forEach(function(c) {
c(a);
});
return this;
}
};
E.startevents();
E.factory.attr = class {
constructor() {
this.a = {};
}
_attr(k,v) {
k = k.toString();
if(!(k in this.a)) {
this.a[ k] =[];
}
this.a[ k].push(v);
}
attr(k,v) {
if(!(E.empty(k) && E.empty(v))) {
if(E.iterable(k)) {
if(E.empty(v)) {
for(var k1 in k) {
this._attr(k1,k[ k1]);
}
} else {
for(var k1 in k) {
this._attr(k1,v);
}
}
} else {
this._attr(k,v);
}
}
return this;
}
_buildattr(k,v) {
return `${k.toString()}="${(E.iterable(v) ? v.join(' '):v)}"`;
}
buildattrs() {
var s =[];
for(var k in this.a) {
s.push(this._buildattr(k,this.a[ k]));
}
return s.join(' ');
}
};
E.factory.iterable = class extends E.factory.attr {
constructor() {
super();
this.c =[];
}
child(v) {
if(v && !E.empty(v)) {
if(E.type(v,'array')) {
for(var k in v) {
this.c.push(v[ k]);
}
} else {
this.c.push(v);
}
}
return this;
}
};
E.factory.base = class extends E.factory.iterable {
constructor() {
super();
}
buildchildren() {
var s =[];
for(var k in this.c) {
if(this.c[ k].build) {
s.push(this.c[ k].build());
} else if(this.c[ k].toString) {
s.push(this.c[ k].toString());
} else {
s.push(this.c[ k]);
}
}
return s.join('');
}
};
E.factory.node = class extends E.factory.base {
constructor(tag,attrs,children) {
super();
this.t = (tag && tag.toString().length > 0) ? tag.toString().toLowerCase():'';
this.attr(attrs);
this.child(children);
}
build() {
var nc =[ 'br','hr','img','link','meta','meta-equiv','input'];
var a = this.buildattrs();
var s = `<${this.t + (!E.empty(a) ? ' ' + a:'')}>`;
if(!(this.t in nc)) {
s += `${this.buildchildren()}</${this.t}>`;
}
return s;
}
toString() {
return this.build();
}
put(t) {
if(!E.empty(t)) {
$(t).append(this.build());
}
return this;
}
};
E.factory.deck = class extends E.factory.attr {
constructor() {
super();
this.c =[];
}
card(title,body,attr) {
var x = {
'title':E.empty(title) ? null:title,
'body':E.empty(body) ? null:body,
'attr':!E.empty(attr) && E.iterable(attr) ? attr:{}
};
this.c.push(x);
return this;
}
};
E.factory.paginated = class {
constructor() {
this.d =[];
this.opage = 10;
this.ostart = 0;
}
item(x) {
if(!E.empty(x)) {
this.d.push(x);
}
return this;
}
items(x) {
if(!E.empty(x) && E.type(x,'array')) {
this.d = x;
}
return this;
}
pagesize(x) {
this.opage = parseInt(x);
return this;
}
_total() {
return this.d.length;
}
_first() {
return (this.ostart > 0 ? 0:null);
}
_last() {
var i = (Math.ceil(this._total() / this.opage) - 1) * this.opage;
return (i <= this.ostart) ? null:i;
}
_prev() {
var i = (this.ostart - this.opage);
return (i >= 0) ? i:null;
}
_next() {
var i = (this.ostart + this.opage);
return (i <= this._total()) ? i:null;
}
_pagestart() {
return (this.ostart + 1);
}
_pageend() {
var i = (this.ostart + this.opage);
return (i > this._total() ? this._total():i);
}
_controls() {
if(this._total() > this.opage) {
var x = new E.widget.pager({'class':'e-pagination'});
x.button($E('glyphicon','step-backward'),'#' + this.id,false,{'data-index':this._first(),'title':'First page','class':'page-first'});
x.button($E('glyphicon','triangle-left'),'#' + this.id,false,{'data-index':this._prev(),'title':'Previous page','class':'page-prev'});
x.button($E('glyphicon','triangle-right'),'#' + this.id,false,{'data-index':this._next(),'title':'Next page','class':'page-next'});
x.button($E('glyphicon','step-forward'),'#' + this.id,false,{'data-index':this._last(),'title':'Last page','class':'page-last'});
return x;
}
return '';
}
updatecontrols(id) {
$('div[data-instance="' + id + '"] .e-pagination li').hide();
var x = this._first();
if(x != null) {
$('div[data-instance="' + id + '"] .e-pagination li a.page-first').data('index',x);
$('div[data-instance="' + id + '"] .e-pagination li a.page-first').parent().show();
}
var x = this._prev();
if(x != null) {
$('div[data-instance="' + id + '"] .e-pagination li a.page-prev').data('index',x);
$('div[data-instance="' + id + '"] .e-pagination li a.page-prev').parent().show();
}
var x = this._next();
if(x != null) {
$('div[data-instance="' + id + '"] .e-pagination li a.page-next').data('index',x);
$('div[data-instance="' + id + '"] .e-pagination li a.page-next').parent().show();
}
var x = this._last();
if(x != null) {
$('div[data-instance="' + id + '"] .e-pagination li a.page-last').data('index',x);
$('div[data-instance="' + id + '"] .e-pagination li a.page-last').parent().show();
}
}
_status() {
return 'Showing records <span class="e-pagination-start"></span> to <span class="e-pagination-end"></span> of <span class="e-pagination-total"></span>';
}
updatestatus(id) {
$('div[data-instance="' + id + '"] .e-pagination-start').html(this._pagestart());
$('div[data-instance="' + id + '"] .e-pagination-end').html(this._pageend());
$('div[data-instance="' + id + '"] .e-pagination-total').html(this._total());
}
data(i) {
this.ostart = parseInt(i);
var r =[];
for(var i = (this._pagestart() - 1); i < this._pageend(); i ++) {
r.push(this.d[ i]);
}
return r;
}
toString() {
return this.build();
}
put(t) {
if(!E.empty(t)) {
$(t).append(this.build());
E.events.trigger(`${this.id}:pager`,0);
}
return this;
}
};
function $E(cls,arg) {
cls = cls.toString().toLowerCase();
var ptr = false;
if(cls in E.widget) {
ptr = E.widget[ cls];
} else if (cls in E.plugin) {
ptr = E.plugin[ cls];
} else if (cls in E.control) {
ptr = E.control[ cls];
}
if(ptr !== false) {
if(arg) {
return new ptr(arg);
} else {
return new ptr();
}
}
return false;
}
$('body').on('click','.e-pagination a',function() {
E.events.trigger($(this).parents('.e-pagination-instance').data('instance') + ':pager',$(this).data('index'));
$(this).blur();
});
E.tag.a = class extends E.factory.node {
constructor(attr,children) {
super('a',attr,children);
}
};
E.tag.div = class extends E.factory.node {
constructor(attr,children) {
super('div',attr,children);
}
};
E.tag.h = class extends E.factory.node {
constructor(size,attr,children) {
super('h' + size.toString(),attr,children);
}
};
E.tag.label = class extends E.factory.node {
constructor(text,forid) {
super('label');
if(!E.empty(forid)) {
this.attr('for',forid);
}
if(!E.empty(text)) {
this.child(text);
}
}
};
E.tag.p = class extends E.factory.node {
constructor(attr,children) {
super('p',attr,children);
}
};
E.bootstrap = {
modes:[ 'default','primary','success','info','warning','danger','link'],
sizes:[ 'lg','','sm','xs','block'],
states:[ '','active','disabled'],
tablemodes:[ '','striped','bordered','condensed'],
imgmodes:[ 'rounded','circle','thumbnail'],
textmodes:[ 'muted','primary','success','info','warning','danger'],
bgmodes:[ 'primary','success','info','warning','danger'],
aligns:[ 'left','center','right','justify','nowrap'],
casemodes:[ 'up','down','camel','uppercase','lowercase','capitalize']
};
E.bootstrap.node = class extends E.factory.node {
constructor(prefix,tag,attrs,children) {
super(tag,attrs,children);
this.p = !E.empty(prefix) ? prefix.toString():null;
}
mode(x) {
if(!E.empty(this.p)) {
x = x.toString().toLowerCase();
if(E.bootstrap.modes.includes(x)) {
this.attr('class',`${this.p}-${x}`);
}
}
return this;
}
size(x) {
if(!E.empty(this.p)) {
x = x.toString().toLowerCase();
if(E.bootstrap.sizes.includes(x)) {
this.attr('class',`${this.p}-${x}`);
}
}
return this;
}
state(x) {
if(!E.empty(this.p)) {
x = x.toString().toLowerCase();
if(E.bootstrap.states.includes(x)) {
this.attr('class',x);
}
}
return this;
}
textmode(x) {
x = x.toString().toLowerCase();
if(E.bootstrap.textmodes.includes(x)) {
this.attr('class',`text-${x}`);
}
return this;
}
bgmode(x) {
x = x.toString().toLowerCase();
if(E.bootstrap.bgmodes.includes(x)) {
this.attr('class',`bg-${x}`);
}
return this;
}
clearfix() {
this.attr('class','clearfix');
return this;
}
align(x) {
x = x.toString().toLowerCase();
if(E.bootstrap.aligns.includes(x)) {
this.attr('class',`text-${x}`);
}
return this;
}
textcase(x) {
x = x.toString().toLowerCase();
if(E.bootstrap.casemodes.includes(x)) {
switch(x) {
case 'up':
case 'upper':
case 'uppercase':
x = 'uppercase';
break;
case 'down':
case 'lower':
case 'lowercase':
x = 'lowercase';
break;
case 'camel':
case 'capitalize':
x = 'capitalize';
break;
}
this.attr('class',`text-${x}`);
}
return this;
}
};
E.widget.accordion = class extends E.factory.deck {
constructor(attr) {
super();
this.attr(attr);
this.attr('class','e-accordion panel-group');
this.attr('role','tablist');
this.attr('aria-multiselectable','true');
}
build() {
if(!('id' in this.a)) {
this.attr('id',E.id());
}
var x = new E.tag.div(this.a);
if(!E.empty(this.c)) {
for(var i in this.c) {
var c = this.c[ i];
var y = new E.tag.div({'class':'panel panel-default'});
if(!E.empty(c.attr)) {
y.attr(c.attr);
}
var id = E.id();
if(!E.empty(c.title)) {
var h = new E.tag.a({'class':'e-accordion-toggle','role':'button','data-toggle':'collapse','data-parent':`#${this.a.id}`,'href':`#${id}`,'aria-expanded':'false','aria-controls':y.a.id},c.title);
h = new E.tag.div({'class':'panel-heading','role':'tab','id':`${id}-h`},new E.tag.h('4',{'class':'panel-title'},h));
y.child(h);
}
var z = new E.tag.div({'class':'panel-body'},c.body);
z = new E.tag.div({'class':'panel-collapse collapse','role':'tabpanel','id':id,'aria-labelledby':`${id}-h`},z);
y.child(z);
x.child(y);
}
}
return x.build();
}
toString() {
return this.build();
}
put(t) {
if(!E.empty(t)) {
$(t).append(this.build());
}
return this;
}
};
E.widget.alert = class extends E.bootstrap.node {
constructor(attr,children) {
super('alert','div',attr,children);
this.attr('class','alert');
}
callout(s) {
if(s && !E.empty(s)) {
this.child(new E.factory.node('strong',null,s));
}
return this;
}
};
E.widget.badge = class extends E.factory.node {
constructor(attr,children) {
super('span',attr,children);
this.attr('class','badge');
}
};
E.widget.blockquote = class extends E.factory.node {
constructor(attr,children) {
super('blockquote',attr,children);
this.ft = null;
}
footer(x) {
if(!E.empty(x)) {
this.ft = x;
}
return this;
}
reverse() {
this.attr('class','blockquote-reverse');
return this;
}
build() {
if(!E.empty(this.ft)) {
this.child(new E.factory.node('footer',null,this.ft));
}
return super.build();
}
};
E.widget.breadcrumbs = class extends E.factory.node {
constructor(attr,children) {
super('ol',attr);
this.attr('class','breadcrumb');
this.i =[];
}
crumb(url,label,active) {
if(label) {
this.i.push({'url':url,'label':label,'active':active});
}
return this;
}
build() {
for(var i in this.i) {
var y = (this.i[ i].active === true);
var l = y ? this.i[ i].label:new E.tag.a({'href':this.i[ i].url},this.i[ i].label);
this.child(new E.factory.node('li',y ? {'class':'active'}:null,l));
}
return super.build(); 
}
};
E.widget.button = class extends E.bootstrap.node {
constructor(attr,children) {
super('btn','button',attr,children);
this.attr('class','btn');
}
};
E.widget.checkbox = class extends E.factory.attr {
constructor(attr) {
super();
this.attr(attr);
this.oi = false;
this.od = false;
this.txt = '';
}
inline() {
this.oi = true;
return this;
}
disabled() {
this.od = true;
return this;
}
label(x) {
if(!E.empty(x)) {
this.txt = x;
}
return this;
}
build() {
var x = new E.factory.node('label');
if(this.oi === true) {
x.attr('class','checkbox-inline');
}
var y = new E.factory.node('input',{'type':'checkbox'});
if(this.od === true) {
y.attr('disabled',true);
}
y.attr(this.a);
x.child(y);
if(!E.empty(this.txt)) {
x.child(this.txt);
}
if(this.io !== true) {
x = new E.tag.div({'class':'checkbox'},x);
if(this.od === true) {
x.attr('disabled',true);
}
}
return x.build();
}
toString() {
return this.build();
}
put(t) {
if(!E.empty(t)) {
$(t).append(this.build());
}
return this;
}
};
E.widget.div = class extends E.bootstrap.node {
constructor(attr,children) {
super(null,'div',attr,children);
}
};
E.widget.dropdown = class extends E.factory.iterable {
constructor(attr,children) {
super(attr,children);
this.attr('class','dropdown');
this.db = '';
}
label(str) {
if(!E.empty(str)) {
this.db = str.toString();
}
return this;
}
item(url,label,active,disabled) {
if(!E.empty(label)) {
var x = {'url':url.toString(),'label':label,'active':false,'disabled':false};
if(active && active === true) {
x.active = true;
}
if(disabled && disabled === true) {
x.disabled = true;
}
this.child(x);
}
return this;
}
separator() {
this.child({'separator':true});
return this;
}
build() {
var z = new E.tag.div({'class':'dropdown'});
if(!('id' in this.a)) {
this.attr('id',E.id());
}
var x = new E.widget.button({'class':'btn-default dropdown-toggle','type':'button','id':this.a.id,'data-toggle':'dropdown','aria-haspopup':'true','aria-expanded':'false'});
if(!E.empty(this.db)) {
x.child(this.db);
}
x.child(' ').child(new E.factory.node('span',{'class':'caret'}));
z.child(x);
x = new E.widget.list({'class':'dropdown-menu','aria-labelledby':this.a.id});
for(var i in this.c) {
if('separator' in this.c[ i]) {
x.separator();
} else {
var y = new E.tag.a({'href':this.c[ i].url},this.c[ i].label);
x.child(y,this.c[ i].active,this.c[ i].disabled);
}
}
z.child(x);
return z.build();
}
toString() {
return this.build();
}
put(t) {
if(!E.empty(t)) {
$(t).append(this.build());
}
return this;
}
};
E.widget.form = class extends E.factory.node {
constructor(attr,children) {
super('form',attr,children);
}
horizontal() {
this.attr('class','form-horizontal');
return this;
}
inline() {
this.attr('class','form-inline');
return this;
}
};
E.widget.formgroup = class extends E.factory.node {
constructor(attr,children) {
super('div',attr,children);
this.attr('class','form-group');
}
};
E.widget.glyphicon = class extends E.factory.node {
constructor(icon,attr) {
super('i');
this.attr(attr);
this.attr('class',`glyphicon glyphicon-${icon.toString().toLowerCase()}`);
}
};
E.widget.heading = class extends E.bootstrap.node {
constructor(size,primary,secondary) {
super(null,'h' + size.toString());
this.tp = null;
this.ts = null;
this.primary(primary);
this.secondary(secondary);
}
primary(x) {
if(!E.empty(x)) {
this.tp = x;
}
return this;
}
secondary(x) {
if(!E.empty(x)) {
this.ts = x;
}
return this;
}
build() {
if(!E.empty(this.tp)) {
this.child(this.tp);
}
if(!E.empty(this.ts)) {
this.child(' ');
this.child(new E.factory.node('small',null,this.ts));
}
return super.build();
}
};
E.widget.img = class extends E.factory.node {
constructor(attr,children) {
super('img',attr,children);
}
mode(x) {
x = x.toString().toLowerCase();
if(!E.empty(x) && E.bootstrap.imgmodes.includes(x)) {
this.attr('class',`img-${x}`);
}
return this;
}
};
E.widget.input = class extends E.factory.node {
constructor(attr,children) {
super('input',attr,children);
this.attr('class','form-control');
}
};
E.widget.inputgroup = class extends E.factory.node {
constructor(attr,children) {
super('div',attr,children);
this.attr('class','input-group');
this.ap = null;
this.as = null;
this.ifd = null;
this.is = '';
}
size(x) {
x = x.toString().toLowerCase();
if(E.bootstrap.sizes.includes(x)) {
this.is = x;
}
return this;
}
before(x) {
if(!E.empty(x)) {
this.ap = x;
}
return this;
}
after(x) {
if(!E.empty(x)) {
this.as = x;
}
return this;
}
field(x) {
if(!E.empty(x)) {
this.ifd = x;
}
return this;
}
build() {
if(!E.empty(this.is)) {
this.attr('class',`input-group-${this.is}`);
}
if(!E.empty(this.ap)) {
this.child(new E.factory.node('span',{'class':'input-group-addon'},this.ap));
}
this.child(this.ifd);
if(!E.empty(this.as)) {
this.child(new E.factory.node('span',{'class':'input-group-addon'},this.as));
}
return super.build();
}
};
E.widget.jumbotron = class extends E.factory.node {
constructor(attr,children) {
super('div',attr,children);
this.attr('class','jumbotron');
}
header(x) {
if(!E.empty(x)) {
this.child(new E.tag.h('1',null,x));
}
return this;
}
};
E.widget.label = class extends E.bootstrap.node {
constructor(attr,children) {
super('label','span',attr,children);
this.attr('class','label');
}
};
E.widget.list = class extends E.factory.node {
constructor(attr,children) {
super('ul',attr,children);
}
ordered() {
this.t = 'ol';
return this;
}
unordered() {
this.t = 'ul';
return this;
}
inline() {
this.attr('class','list-inline');
return this;
}
child(c,active,disabled) {
if(!E.empty(c)) {
var x = new E.factory.node('li',null,c);
if(active && active === true) {
x.attr('class','active');
}
if(disabled && disabled === true) {
x.attr('class','disabled');
}
super.child(x);
}
return this;
}
separator() {
super.child(new E.factory.node('li',{'role':'separator','class':'divider'}));
}
};
E.widget.modal = class extends E.factory.node {
constructor(attr,children) {
super('div',attr,children);
this.attr('class','modal fade');
this.attr('tabindex','-1');
this.attr('role','dialog');
this.mh = null;
this.mb =[];
this.mf =[];
this.cb = true;
}
noclose() {
this.cb = false;
}
header(x) {
if(!E.empty(x)) {
this.mh = x;
}
return this;
}
body(x) {
if(!E.empty(x)) {
this.mb.push(x);
}
return this;
}
footer(x) {
if(!E.empty(x)) {
this.mf.push(x);
}
return this;
}
build() {
if(!('id' in this.a)) {
this.attr('id',E.id());
}
var z = new E.tag.div({'class':'modal-content'});
if(this.cb || !E.empty(this.mh)) {
var x = new E.tag.div({'class':'modal-header'});
if(this.cb) {
var y = new E.factory.node('span',{'aria-hidden':'true'},'&times;');
x.child(new E.factory.node('button',{'type':'button','class':'close','data-dismiss':'modal','aria-label':'Close'},y));
}
if(!E.empty(this.mh)) {
x.child(new E.tag.h('4',{'class':'modal-title'},this.mh));
}
z.child(x);
}
if(!E.empty(this.mb)) {
z.child(new E.tag.div({'class':'modal-body'},this.mb));
}
if(!E.empty(this.mf)) {
z.child(new E.tag.div({'class':'modal-footer'},this.mf));
}
this.child(new E.tag.div({'class':'modal-dialog','role':'document'},z));
return super.build();
}
};
E.widget.navbar = class extends E.factory.iterable {
constructor(attr,children) {
super(attr,children);
this.attr('class','dropdown');
this.db = '';
this.ofluid = false;
this.oinverse = false;
this.ofixed = false;
}
brand(str) {
if(!E.empty(str)) {
this.db = str;
}
return this;
}
fluid() {
this.ofluid = true;
return this;
}
fixed() {
this.ofixed = true;
return this;
}
inverse() {
this.oinverse = true;
return this;
}
item(url,label,active,disabled) {
if(!E.empty(label)) {
var x = {'url':url.toString(),'label':label,'active':false,'disabled':false};
if(active && active === true) {
x.active = true;
}
if(disabled && disabled === true) {
x.disabled = true;
}
this.child(x);
}
return this;
}
build() {
if(!('id' in this.a)) {
this.attr('id',E.id());
}
var x = new E.tag.div({'class':`container${this.ofluid ? '-fluid':''}`});
var y = new E.factory.node('span',{'class':'icon-bar'});
var b = new E.widget.button({'class':'navbar-toggle collapsed','type':'button','data-toggle':'collapse','data-target':`#${this.a.id}`,'aria-expanded':'false'});
b.child(new E.factory.node('span',{'class':'sr-only'},'Toggle navigation')).child(y).child(y).child(y);
y = new E.tag.div({'class':'navbar-header'},b);
if(!E.empty(this.db)) {
y.child(this.db);
}
x.child(y);
y = new E.widget.list({'class':'nav navbar-nav'});
for(var i in this.c) {
y.child(new E.tag.a({'href':this.c[ i].url},this.c[ i].label),this.c[ i].active,this.c[ i].disabled);
}
y = new E.tag.div({'class':'collapse navbar-collapse','id':this.a.id},y);
x.child(y);
x = new E.factory.node('nav',{'class':'navbar'},x);
if(this.ofixed === true) {
x.attr('class','navbar-fixed-top');
}
if(this.oinverse === true) {
x.attr('class','navbar-inverse');
}
return x.build();
}
toString() {
return this.build();
}
put(t) {
if(!E.empty(t)) {
$(t).append(this.build());
}
return this;
}
};
E.widget.p = class extends E.bootstrap.node {
constructor(attr,children) {
super(null,'p',attr,children);
}
lead() {
this.attr('class','lead');
}
};
E.widget.pageheader = class extends E.factory.node {
constructor(attr,children) {
super('div',attr);
this.attr('class','page-header');
this.child(children);
}
child(x) {
if(!E.empty(x)) {
super.child(new E.tag.h((this.c.length + 1),null,x));
}
return this;
}
};
E.widget.pager = class extends E.factory.attr {
constructor(attr) {
super();
this.attr(attr);
this.c =[];
}
button(label,href,disabled,attr) {
if(!E.empty(label)) {
var x = {'label':label,'url':href,'disabled':false,'attr':(attr ? attr:{})};
if(disabled && disabled === true) {
x.disabled = true;
}
this.c.push(x);
}
return this;
}
build() {
var x = new E.widget.list({'class':'pager'});
for(var i in this.c) {
var y = new E.factory.node('a',{'href':this.c[ i].url},this.c[ i].label);
if(!E.empty(this.c[ i].attr)) {
y.attr(this.c[ i].attr);
}
x.child(y,null,this.c[ i].disabled);
}
x = new E.factory.node('nav',this.a,x);
return x.build();
}
};
E.widget.panel = class extends E.bootstrap.node {
constructor(attr,children) {
super('panel','div',attr,children);
this.attr('class','panel');
this.ph =[];
this.pb =[];
this.pf =[];
}
header(x) {
if(!E.empty(x)) {
this.ph.push(x);
}
return this;
}
body(x) {
if(!E.empty(x)) {
this.pb.push(x);
}
return this;
}
footer(x) {
if(!E.empty(x)) {
this.pf.push(x);
}
return this;
}
build() {
if(!E.empty(this.ph)) {
var x = new E.tag.div({'class':'panel-heading'});
if(this.ph.length == 1) {
x.child(new E.tag.h('3',{'class':'panel-title'},this.ph[0]));
} else {
for(var i in this.ph) {
x.child(this.ph[ i]);
}
}
this.child(x);
}
if(!E.empty(this.pb)) {
this.child(new E.tag.div({'class':'panel-body'},this.pb));
}
if(!E.empty(this.pf)) {
this.child(new E.tag.div({'class':'panel-footer'},this.pf));
}
return super.build();
}
};
E.widget.progressbar = class extends E.factory.node {
constructor(attr,children) {
super('div',attr,children);
this.attr('class','e-progress progress');
this.bi =[];
}
bar(min,max,value,mode,attr) {
var x = {
'min':parseInt(min),
'max':parseInt(max),
'value':parseInt(value),
'size':0,
'attr':E.empty(attr) ? {}:attr
};
x.size = (x.value / (x.max - x.min)) * 100;
if(!E.empty(mode)) {
mode = mode.toString().toLowerCase();
if(E.bootstrap.modes.includes(mode) || mode == 'offset') {
x.mode = mode;
if(mode == 'offset') {
x.attr.style = 'background-color:transparent !important; box-shadow:none !important;';
}
}
}
this.bi.push(x);
return this;
}
build() {
for(var i in this.bi) {
var b = this.bi[ i];
var x = new E.tag.div({'class':'progress-bar','role':'progressbar','aria-valuemin':b.min,'aria-valuemax':b.max,'aria-valuenow':b.value});
x.attr(b.attr);
x.attr('style','width:' + b.size + '%');
if('mode' in b) {
x.attr('class','progress-bar-' + b.mode);
}
this.child(x);
}
return super.build();
}
};
E.widget.radio = class extends E.factory.attr {
constructor(attr) {
super();
this.attr(attr);
this.oi = false;
this.od = false;
this.txt = '';
}
inline() {
this.oi = true;
return this;
}
disabled() {
this.od = true;
return this;
}
label(x) {
if(!E.empty(x)) {
this.txt = x;
}
return this;
}
build() {
var x = new E.factory.node('label');
if(this.oi === true) {
x.attr('class','radio-inline');
}
var y = new E.factory.node('input',{'type':'radio'});
if(this.od === true) {
y.attr('disabled',true);
}
y.attr(this.a);
x.child(y);
if(!E.empty(this.txt)) {
x.child(this.txt);
}
if(this.oi !== true) {
x = new E.tag.div({'class':'radio'},x);
if(this.od === true) {
x.attr('disabled',true);
}
}
return x.build();
}
toString() {
return this.build();
}
put(t) {
if(!E.empty(t)) {
$(t).append(this.build());
}
return this;
}
};
E.widget.select = class extends E.factory.iterable {
constructor(attr,children) {
super(attr);
this.attr('class','form-control');
if(children && !E.empty(children)) {
this.items(children);
}
this.sv = null;
this.mu = false;
}
multiple() {
this.mu = true;
return this;
}
selected(value) {
this.sv = value;
return this;
}
item(label,value,selected) {
if(!E.empty(label)) {
var x = {'value':value,'label':label};
if(selected && selected === true) {
x.selected = true;
}
this.child(x);
}
return this;
}
items(data) {
if(!E.empty(data) && E.type(data,'array')) {
for(var i in data) {
d = data[ i];
if('value' in d && 'label' in d) {
this.item(d.label,d.value);
} else {
this.item(d[0],d[1]);
}
}
}
return this;
}
build() {
if(this.mu === true) {
this.attr('multiple',true);
}
var x = new E.factory.node('select',this.a);
for(var i in this.c) {
var c = this.c[ i];
var y = new E.factory.node('option',{'value':c.value},c.label);
if((c.selected && c.selected === true) || c.value == this.sv) {
y.attr('selected','selected');
}
x.child(y);
}
return x.build();
}
toString() {
return this.build();
}
put(t) {
if(!E.empty(t)) {
$(t).append(this.build());
}
return this;
}
};
E.widget.table = class extends E.factory.node {
constructor(attr,children) {
super('table',attr,children);
this.attr('class','table');
this.th =[];
this.tr =[];
this.tf = false;
this.thover = false;
}
mode(x) {
x = x.toString().toLowerCase();
if(!E.empty(x) && E.bootstrap.tablemodes.includes(x)) {
this.attr('class',`table-${x}`);
}
return this;
}
hover() {
this.attr('class','table-hover');
return this;
}
footer(x) {
this.tf = x;
return this;
}
header(x) {
this.th.push(x);
return this;
}
headers(x) {
if(E.type(x,'array')) {
this.th = x;
}
return this;
}
row(x) {
if(E.iterable(x)) {
this.tr.push(x);
}
return this;
}
build() {
var h = null;
if(!E.empty(this.th)) {
var x = new E.factory.node('tr');
for(var i in this.th) {
x.child(new E.factory.node('th',null,this.th[ i]));
}
this.child(new E.factory.node('thead',null,x));
if(this.tf === true) {
h = x;
}
}
var x = new E.factory.node('tbody');
if(!E.empty(this.tr)) {
for(var i in this.tr) {
if(E.iterable(this.tr[ i])) {
var r = new E.factory.node('tr');
for(var j in this.tr[ i]) {
r.child(new E.factory.node('td',null,this.tr[ i][ j]));
}
x.child(r);
}
}
}
this.child(x);
if(!E.empty(h)) {
this.child(new E.factory.node('tfoot',null,h));
}
return super.build();
}
};
E.widget.tabs = class extends E.factory.deck {
constructor(attr) {
super();
this.attr(attr);
this.attr('class','e-tabs');
this.op = false;
this.oj = false;
}
pills() {
this.op = true;
return this;
}
justify() {
this.oj = true;
return this;
}
build() {
var x = new E.tag.div(this.a);
if(!E.empty(this.c)) {
var u = new E.factory.node('ul',{'class':'nav','role':'tablist'});
u.attr('class',this.op === true ? 'nav-pills':'nav-tabs');
if(this.oj === true) {
u.attr('class','nav-justified');
}
var b = new E.tag.div({'class':'tab-content'});
for(var i in this.c) {
var c = this.c[ i];
if(!E.empty(c.attr)) {
y.attr(c.attr);
}
var id = E.id();
if(!E.empty(c.title)) {
var a = new E.tag.a({'href':`#${id}`,'aria-controls':id,'role':'tab','data-toggle':'tab'},c.title);
var l = {'role':'presentation'};
if(i == 0) {
l['class'] = 'active';
}
u.child(new E.factory.node('li',l,a));
}
b.child(new E.tag.div({'class':`tab-pane${i == 0 ? ' active':''}`,'role':'tabpanel','id':id},c.body));
}
x.child(u).child(b);
}
return x.build();
}
toString() {
return this.build();
}
put(t) {
if(!E.empty(t)) {
$(t).append(this.build());
}
return this;
}
};
E.widget.well = class extends E.factory.node {
constructor(attr,children) {
super('div',attr,children);
this.attr('class','well');
}
large() {
this.attr('class','well-lg');
return this;
}
small() {
this.attr('class','well-sm');
return this;
}
};
$(function() {
$('body').on('click','.e-accordion-toggle',function() {
$(this).blur();
});
$('body').on('click','.e-tabs a',function(e) {
e.preventDefault();
$(this).tab('show');
$(this).blur();
});
});